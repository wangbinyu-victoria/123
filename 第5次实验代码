main.c

#include <stdio.h>
#include "province_cul.h"
#include "province_sort.h"

int main() {
    char str[20];
    scanf("%s", str);
    // 测试按照省份分类统计的信息
    Result result = solution(str);
    int i;
    for (i = 0; i < result.areaLen; i++) {
        Area area = result.areas[i];
        int len = area.cityLen;
        int j;
        // 输出省份信息
        printf("%s\n", area.province);
        for (j = 0; j < len; j++) {
            // 输出该省份下的城市信息
            City city = area.city[j];
            printf("%s  %s\n", city.cityName, city.num);
        }
        printf("\n");
    }
    // 测试按照省份确诊人数排序
    sortArea(&result);
    sortCity(&result);
    for (i = 0; i < result.areaLen; i++) {
        Area area = result.areas[i];
        int len = area.cityLen;
        int j;
        // 输出省份信息
        printf("%s\n", area.province);
        for (j = 0; j < len; j++) {
            // 输出该省份下的城市信息
            City city = area.city[j];
            printf("%s  %s\n", city.cityName, city.num);
        }
        printf("\n");
    }
    return 0;
}
/**
* /Users/chenhanma/CLionProjects/832701/yq_in.txt
*/



province_cul.h
#ifndef INC_832701_PROVINCE_CUL_H
#define INC_832701_PROVINCE_CUL_H
// 姣忚鏈€澶ч暱搴?
#define LINE_MAX 1024
#include "string.h"
typedef struct City {
    // 鍩庡競鍚嶇О
    char cityName[20];
    // 鍩庡競鐨勭‘璇婄梾渚?
    char num[20];
    // 鍩庡競鐨勭‘璇婄梾渚媙um
    int number;
} City;

typedef struct Area {
    // 鐪佷唤
    char province[20];
    // 鐪佷唤涓嬬殑鍩庡競鍒楄〃
    City city[100];
    // 鍩庡競鐨勪釜鏁?
    int cityLen;
    // 鎬荤‘璇婃暟鐩?
    int allNum;
} Area;

typedef struct Result {
    Area areas[100];
    int areaLen;
}Result;

int getAreaIndex(char province[], Result result) {
    int i;
    for (i = 0; i < result.areaLen; i++) {
        Area area = result.areas[i];
        if (strcmp(province, area.province) == 0) {
            return i;
        }
    }
    return -1;
}

int transNum(char str[], int len) {
    int i;
    int value = 0;
    for (i = 0; i < len; i++) {
        value = value * 10 + (str[i] - '0');
    }
    return value;
}

Result solution(char *path) {
    Result result;
    result.areaLen = 0;
    FILE *fp;
    char arguments[10000];
    fp = fopen(path, "r+");
    if (!fp) {
        printf("the file is empty, cannot open it.");
        return result;
    }
    int i;
    int fileArLen;
    // 鎸夌収琛岃鍙栨枃浠?
    while (fgets(arguments, LINE_MAX, fp)) {
        int curIndex = 0;
        char province[20];
        char cityName[20];
        char num[20];
        fileArLen = strlen(arguments);
        char tempStr[20];
        int tempIndex = 0;
        for (i = 0; i < fileArLen; i++) {
            // 涓€琛屽埌澶?
            if (arguments[i] == '\n') {
                break;
            }
            // tab閿垎鍓?
            if (arguments[i] == '\t') {
                tempStr[tempIndex] = '\0';
                tempIndex = 0;
                if (curIndex == 0) {
                    // 鐪佷唤淇℃伅
                    strcpy(province, tempStr);
                } else if (curIndex == 1) {
                    // 鍩庡競淇℃伅
                    strcpy(cityName, tempStr);
                }
                curIndex++;
                continue;
            }
            tempStr[tempIndex++] = arguments[i];
        }
        // 璇ュ煄甯傜殑鏁伴噺
        tempStr[tempIndex++] = '\0';
        strcpy(num, tempStr);
        int areaIndex = getAreaIndex(province, result);
        if (areaIndex == -1) {
            // 鏂扮渷浠?
            Area area;
            area.cityLen = 0;
            strcpy(area.province, province);
            City city;
            strcpy(city.cityName, cityName);
            strcpy(city.num, num);
            city.number = transNum(num, strlen(num));
            area.city[area.cityLen++] = city;
            area.allNum = area.allNum + city.number;
            result.areas[result.areaLen++] = area;
        } else {
            // 鐪佷唤鍦ㄤ箣鍓嶅嚭鐜拌繃锛岀洿鎺ユ嬁鍑烘潵锛屾洿鏂拌鐪佷唤涓嬬殑鍩庡競淇℃伅
            City city;
            strcpy(city.cityName, cityName);
            strcpy(city.num, num);
            city.number = transNum(num, strlen(num));
            result.areas[areaIndex].city[result.areas[areaIndex].cityLen++] = city;
            result.areas[areaIndex].allNum = result.areas[areaIndex].allNum + city.number;
        }
    }
    fclose(fp);
    return result;
}
#endif //INC_832701_PROVINCE_CUL_H

province_sort.h
//
// Created by chenhan Ma on 2022/3/27.
//

#ifndef INC_832701_PROVINCE_SORT_H
#define INC_832701_PROVINCE_SORT_H
#include "string.h"
#include "province_cul.h"

void sortArea(Result* result) {
    int i, j;
    for (i = 0; i < result->areaLen; i++) {
        int k = i;
        for (j = i + 1; j < result->areaLen; j++) {
            if (result->areas[k].allNum == result->areas[j].allNum) {
                if (strcmp(result->areas[k].province, result->areas[j].province) < 0) {
                    k = j;
                }
            } else if (result->areas[k].allNum < result->areas[j].allNum) {
                k = j;
            }
        }
        if (k != i) {
            Area area = result->areas[k];
            result->areas[k] = result->areas[i];
            result->areas[i] = area;
        }
    }
}

void sortCity(Result* result) {
    int i, j, k, z;
    for (z = 0; z < result->areaLen; z++) {
        int len = result->areas[z].cityLen;
        for (i = 0; i < len; i++) {
            k = i;
            for (j = i + 1; j < len; j++) {
                if (result->areas[z].city[k].number == result->areas[z].city[j].number) {
                    if (strcmp(result->areas[z].city[k].cityName, result->areas[z].city[j].cityName) < 0) {
                        k = j;
                    }
                } else if (result->areas[z].city[k].number < result->areas[z].city[j].number) {
                    k = j;
                }
            }
            if (k != i) {
                City city = result->areas[z].city[k];
                result->areas[z].city[k] = result->areas[z].city[i];
                result->areas[z].city[i] = city;
            }
        }
    }
}
#endif //INC_832701_PROVINCE_SORT_H
